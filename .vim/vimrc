" Mapleader
let mapleader = "\<Space>"

" Plugins etc
filetype plugin indent on
syntax on

" Regular backspace
set backspace=indent,eol,start

" No swap files, annoying for dev
set noswapfile

" Read changes from filesys
set autoread

" Line numbers
set number
set colorcolumn=80

" Theme and prettyness
set t_Co=256
syntax enable
set background=dark
colorscheme solarized
let g:solarized_termcolors=256

" Highlighting for go syntax
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1

" Airline list buffers
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename and buffer nr
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#buffer_idx_mode = 1

" Go-vim
" Run go imports along with go fmt on each save
let g:go_fmt_command = "goimports"

" Get type info by default when we hover over things
let g:go_auto_type_info = 1

" Display info on demand + speed up update time
let g:go_auto_type_info = 1
set updatetime=100

" Convenient save on make
set autowrite

" Lint on write
let g:go_metalinter_autosave_enabled = []
let g:go_metalinter_enabled = []

" GoVim shortcuts
" Quicklist nav
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

" Tests
autocmd FileType go nmap <leader>t  <Plug>(go-test)
autocmd FileType go nmap <leader>b  <Plug>(go-build)

" Opening tests in different splits
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" NerdTree remap to ctrl+g
:nnoremap <C-g> :NERDTreeToggle<CR>

" Useful remaps
" Move esc to home row
inoremap jk <ESC>

" Shortcuts more reachable
let mapleader = "'"

" Highlight all results	
set hlsearch

" Show search results while typing
set incsearch

" Share system keyboard
set clipboard=unnamed

" Spelling
set spell
set spell spelllang=en_us
set spellfile=~/.vim/spellfile.add
highlight clear SpellBad
highlight SpellBad term=reverse ctermfg=9 cterm=undercurl guisp=none

" GoBuild or GoCompile based on whether we are in a test file or not
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
